@use 'sass:list';
@use 'sass:selector';
@use 'sass:string';

@function boost(
  $selector: &,
  $amount: 1,
  $index: -1,
) {
  $processedClasses: '';
  @each $aselector in $selector {
    $processedClasses: #{$processedClasses}#{$aselector};

    //  "Compound" selectors
    //! Breaks attribute selectors with spaces
    $simpleClasses: #{$aselector};
    @while (string.index($simpleClasses, ' ') != null) {
      $simpleClasses: '#{string.slice($simpleClasses, 0, string.index($simpleClasses, ' ') - 1)}#{string.slice($simpleClasses, string.index($simpleClasses, ' ') + 1)}';
    }

    // Get latest selector
    $simpleClasses: selector.simple-selectors($simpleClasses);
    $sel: list.nth($simpleClasses, $index);

    // Boost selector appropriately
    $boosted: '';
    $duplicate: ('.', '[', '#');
    $sel-type: string.slice($sel, 1, 1);
    @if (list.index($duplicate, $sel-type)) {
      @for $i from 1 through $amount {
        $boosted: #{$boosted}#{$sel};
      }
      $sel: $boosted;
    } @else {
      @for $i from 1 through $amount {
        $boosted: #{$boosted}#{$sel}#{if($i != $amount, ', ', '')};
      }
      $sel: #{':is('}#{$boosted}#{')'};
    }

    $processedClasses: #{$processedClasses}#{$sel}#{', '};
  }

  @return $processedClasses;
}

@mixin boost(
  $selector: &,
  $amount: 1,
  $index: -1,
) {
  @if not (content-exists()) {
    @warn what the fuck are you doing;
  }
  @at-root
    #{boost(
      $selector: $selector,
      $amount: $amount,
      $index: $index
    )} {
    @content;
  }
}
