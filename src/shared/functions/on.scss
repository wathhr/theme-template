@use 'sass:list';
@use 'sass:selector';

@function on(
  $platform,
  $selector: &,
  $root: false,
) {
  $new-selector: #{$selector};

  // Check if the platform provided is valid
  $valid-platforms: ('win', 'osx', 'linux', 'web');
  @if not (list.index($valid-platforms, $platform)) {
    @error 'Invalid platform. Valid platforms: #{$valid-platforms}';
  }

  // Replace already present platform classes
  @each $vplatform in $valid-platforms {
    $new-selector: selector.replace($new-selector, '.platform-#{$vplatform}', '.platform-#{$platform}');
  }

  // Attach the platform class if the selector has a root selector
  $root-selectors: (':root', 'html');
  @each $rselector in $root-selectors {
    $new-selector: selector.replace($new-selector, $rselector, '#{$rselector}.platform-#{$platform}');
  }

  // If none of the above apply, add the platform class
  @if (selector.parse($selector) == selector.parse($new-selector)) {
    @if ($root) {
      $new-selector: selector.append('.platform-#{$platform}', $selector);
    } @else if (&) and not ($selector == &) {
      $new-selector: selector.nest('.platform-#{$platform}', &, $selector);
    } @else {
      $new-selector: selector.nest('.platform-#{$platform}', $selector);
    }
  }

  @return $new-selector;
}

@mixin on(
  $platform,
  $selector: &,
  $root: false,
) {
  @if not (content-exists()) {
    @warn what the fuck are you doing;
  }
  @at-root
    #{on(
      $platform: $platform,
      $selector: $selector,
      $root: $root
    )} {
    @content;
  }
}
